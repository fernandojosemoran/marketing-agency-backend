"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 3.2.16.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from .config import simpleJwt, aws, ckeditor, djoser, rest_framework

from pathlib import Path

import os
import environ


env = environ.Env()
environ.Env.read_env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get("DEBUG")

ALLOWED_HOSTS = env.list("ALLOWED_HOSTS_DEV")

# Application definition


DJANGO_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

PROJECT_APPS = [
    'apps.category',
    'apps.blog',
    'apps.user',
    'apps.authentication'
]

THIRD_PARTY_APPS = [
    'corsheaders',
    'djoser',
]

THIRD_PARTY_APPS += aws.AWS_APPS
THIRD_PARTY_APPS += rest_framework.REST_FRAMEWORK_APPS
THIRD_PARTY_APPS += ckeditor.CKEDITOR_APPS

INSTALLED_APPS = DJANGO_APPS + PROJECT_APPS + THIRD_PARTY_APPS

# Ckeditor

CKEDITOR_CONFIGS = ckeditor.CKEDITOR_CONFIGS

CKEDITOR_UPLOAD_PATH = ckeditor.CKEDITOR_UPLOAD_PATH

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware'
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'build')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    }
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': os.environ.get("POSTGRES_DB"),
        'USER': os.environ.get("POSTGRES_USER"),
        'PASSWORD': os.environ.get("POSTGRES_PASSWORD"),
        'HOST': os.environ.get("POSTGRES_HOST"),
        'PORT': int(os.environ.get("POSTGRES_PORT", 5432)),
    }
}

# dj_database_url.config(default=os.environ.get("DATABASE_URL"))


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    }
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'es'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STORAGES = aws.STORAGES

if aws.Destinations.isS3():
    AWS_ACCESS_KEY_ID = aws.AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY = aws.AWS_SECRET_ACCESS_KEY
    AWS_STORAGE_BUCKET_NAME = aws.AWS_STORAGE_BUCKET_NAME
    AWS_S3_CUSTOM_DOMAIN = aws.AWS_S3_CUSTOM_DOMAIN
    AWS_S3_OBJECT_PARAMETERS = aws.AWS_S3_OBJECT_PARAMETERS
    AWS_LOCATION = aws.AWS_LOCATION

    # static files settings
    STATIC_URL = aws.STATIC_URL
    STATICFILES_STORAGE = aws.STATICFILES_STORAGE

    # public media settings
    PUBLIC_MEDIA_LOCATION = aws.PUBLIC_MEDIA_LOCATION
    MEDIA_URL = aws.MEDIA_URL
    DEFAULT_FILE_STORAGE = aws.DEFAULT_FILE_STORAGE
else:
    STATIC_ROOT = os.path.join(BASE_DIR, 'static')
    STATIC_URL = '/static/'
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
    MEDIA_URL = '/media/'

STATICFILES_DIRS_NAME = 'dist'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, STATICFILES_DIRS_NAME)
]

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = "user.UserAccount"

REST_FRAMEWORK = rest_framework.REST_FRAMEWORK

DJOSER = djoser.DJOSER


SIMPLE_JWT = simpleJwt.SIMPLE_JWT


# Allows
CORS_ORIGIN_ALLOW_ALL = True
# CORST_ORIGIN_WHITELIST = env.list('CORST_ORIGIN_WHITELIST_DEV')
CSRF_TRUSTED_ORIGINS = env.list('CSRF_TRUSTED_ORIGINS_DEV')

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

DOMAIN = os.environ.get("DOMAIN_DEV")

if not DEBUG:
    ALLOWED_HOSTS = env.list("ALLOWED_HOSTS_DEPLOY")

    CORST_ORIGIN_WHITELIST = env.list('CORST_ORIGIN_WHITELIST_DEPLOY')

    CSRF_TRUSTED_ORIGINS = env.list('CSRF_TRUSTED_ORIGINS_DEPLOY')

    DATABASES = {
        'default': env.db('DATABASE_URL')
    }

    DATABASES["default"]["ATOMIC_REQUESTS"] = True

    DOMAIN = os.environ.get("DOMAIN_PRODUCTION")
